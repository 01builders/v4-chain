// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/dydxprotocol/v4/daemons/liquidation/api"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pricefeedapi "github.com/dydxprotocol/v4/daemons/pricefeed/api"

	subaccountstypes "github.com/dydxprotocol/v4/x/subaccounts/types"

	types "github.com/dydxprotocol/v4/x/clob/types"
)

// QueryClient is an autogenerated mock type for the QueryClient type
type QueryClient struct {
	mock.Mock
}

// AreSubaccountsLiquidatable provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) AreSubaccountsLiquidatable(ctx context.Context, in *types.AreSubaccountsLiquidatableRequest, opts ...grpc.CallOption) (*types.AreSubaccountsLiquidatableResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.AreSubaccountsLiquidatableResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.AreSubaccountsLiquidatableRequest, ...grpc.CallOption) *types.AreSubaccountsLiquidatableResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AreSubaccountsLiquidatableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.AreSubaccountsLiquidatableRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClobPair provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) ClobPair(ctx context.Context, in *types.QueryGetClobPairRequest, opts ...grpc.CallOption) (*types.QueryClobPairResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.QueryClobPairResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryGetClobPairRequest, ...grpc.CallOption) *types.QueryClobPairResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryClobPairResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryGetClobPairRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClobPairAll provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) ClobPairAll(ctx context.Context, in *types.QueryAllClobPairRequest, opts ...grpc.CallOption) (*types.QueryClobPairAllResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *types.QueryClobPairAllResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.QueryAllClobPairRequest, ...grpc.CallOption) *types.QueryClobPairAllResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.QueryClobPairAllResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.QueryAllClobPairRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LiquidateSubaccounts provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) LiquidateSubaccounts(ctx context.Context, in *api.LiquidateSubaccountsRequest, opts ...grpc.CallOption) (*api.LiquidateSubaccountsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.LiquidateSubaccountsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *api.LiquidateSubaccountsRequest, ...grpc.CallOption) *api.LiquidateSubaccountsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.LiquidateSubaccountsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.LiquidateSubaccountsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subaccount provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Subaccount(ctx context.Context, in *subaccountstypes.QueryGetSubaccountRequest, opts ...grpc.CallOption) (*subaccountstypes.QuerySubaccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *subaccountstypes.QuerySubaccountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *subaccountstypes.QueryGetSubaccountRequest, ...grpc.CallOption) *subaccountstypes.QuerySubaccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subaccountstypes.QuerySubaccountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subaccountstypes.QueryGetSubaccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubaccountAll provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) SubaccountAll(ctx context.Context, in *subaccountstypes.QueryAllSubaccountRequest, opts ...grpc.CallOption) (*subaccountstypes.QuerySubaccountAllResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *subaccountstypes.QuerySubaccountAllResponse
	if rf, ok := ret.Get(0).(func(context.Context, *subaccountstypes.QueryAllSubaccountRequest, ...grpc.CallOption) *subaccountstypes.QuerySubaccountAllResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subaccountstypes.QuerySubaccountAllResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *subaccountstypes.QueryAllSubaccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMarketPrices provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) UpdateMarketPrices(ctx context.Context, in *pricefeedapi.UpdateMarketPricesRequest, opts ...grpc.CallOption) (*pricefeedapi.UpdateMarketPricesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pricefeedapi.UpdateMarketPricesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pricefeedapi.UpdateMarketPricesRequest, ...grpc.CallOption) *pricefeedapi.UpdateMarketPricesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pricefeedapi.UpdateMarketPricesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pricefeedapi.UpdateMarketPricesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQueryClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryClient creates a new instance of QueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryClient(t mockConstructorTestingTNewQueryClient) *QueryClient {
	mock := &QueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
