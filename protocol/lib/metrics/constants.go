package metrics

// Keep the metric fields alphabetized within each category.
const (
	// Common.
	BlockHeight      = "block_height"
	Count            = "count"
	Detail           = "detail"
	Deterministic    = "deterministic"
	Error            = "error"
	HttpGet5xxx      = "http_get_5xx"
	HttpGetHangup    = "http_get_hangup"
	HttpGetRequest   = "http_get_request"
	HttpGetResponse  = "http_get_response"
	HttpGetTimeout   = "http_get_timeout"
	Invalid          = "invalid"
	Latency          = "latency"
	Matched          = "matched"
	Negative         = "negative"
	No               = "no"
	NonDeterministic = "non_deterministic"
	Positive         = "positive"
	Received         = "received"
	Rejected         = "rejected"
	Success          = "success"
	Valid            = "valid"
	Yes              = "yes"

	// ABCI: Prepare / Process
	DisallowMsg        = "disallow_msg"
	Decode             = "decode"
	FundingTx          = "funding_tx"
	GetTxsInOrder      = "get_txs_in_order"
	Handler            = "handler"
	NumOtherTxs        = "num_other_txs"
	OperationsTx       = "operations_tx"
	OriginalNumTxs     = "original_num_txs"
	OtherTxs           = "other_txs"
	RemoveDisallowMsgs = "remove_disallow_msgs"
	PrepareProposalTxs = "prepare_proposal_txs"
	PricesTx           = "prices_tx"
	TotalNumBytes      = "total_num_bytes"
	TotalNumTxs        = "total_num_txs"
	Validate           = "validate"

	// CLOB.
	AddPerpetualFillAmount                       = "add_perpetual_fill_amount"
	CancelOrder                                  = "cancel_order"
	ClobPairId                                   = "clob_pair_id"
	CollateralizationCheck                       = "place_order_collateralization_check"
	CollateralizationCheckSubaccounts            = "collateralization_check_subaccounts"
	ConvertToUpdates                             = "convert_to_updates"
	Fills                                        = "fills"
	GetFillQuoteQuantums                         = "get_fill_quote_quantums"
	Hydrate                                      = "hydrate"
	IterateOverPendingMatches                    = "iterate_over_pending_matches"
	OrderSide                                    = "order_side"
	PlaceOrder                                   = "place_order"
	ProcessMatches                               = "process_matches"
	ProcessOperations                            = "process_operations"
	Proposer                                     = "proposer"
	ReduceOnly                                   = "reduce_only"
	ShortTermOrder                               = "short_term_order"
	StatefulOrder                                = "stateful_order"
	SubaccountPendingMatches                     = "subaccount_pending_matches"
	TimeInForce                                  = "time_in_force"
	UnknownPlaceOrders                           = "unknown_place_orders"
	ValidateMatches                              = "validate_matches"
	ValidateOrder                                = "validate_order"
	SendCancelOrderOffchainUpdates               = "send_cancel_order_offchain_updates"
	SendPlaceOrderOffchainUpdates                = "send_place_order_offchain_updates"
	SendPlacePerpetualLiquidationOffchainUpdates = "send_perpetual_liquidation_offchain_updates"
	SendProcessProposerMatchesOffchainUpdates    = "send_process_proposer_matches_offchain_updates"
	SendPurgeOffchainUpdates                     = "send_purge_offchain_updates"
	SendUncrossOffchainUpdates                   = "send_uncross_offchain_updates"
	SendPrepareCheckStateOffchainUpdates         = "send_prepare_check_state_offchain_updates"

	// MemCLOB.
	AddedToOrderBook                     = "added_to_orderbook"
	AddToOrderbookCollateralizationCheck = "add_to_orderbook_collateralization_check"
	ExpiredUncommittedStatefulOrders     = "expired_uncommitted_stateful_orders"
	Memclob                              = "memclob"
	RemovedFromOrderBook                 = "removed_from_orderbook"

	// Epochs.
	FundingSampleEpochNumber = "funding_sample_epoch_number"

	// Perpetuals.
	AddPremiumVotes           = "add_premium_votes"
	GetMarginRequirements     = "get_margin_requirements"
	GetNetNotional            = "get_net_notional"
	GetNotionalInBaseQuantums = "get_notional_in_base_quantums"
	GetPerpetualAndMarket     = "get_perpetual_and_market"
	NewPremiumVotes           = "new_premium_votes"
	NumPremiumsFromEpoch      = "num_premiums_from_epoch"
	NumPremiumVotes           = "num_premium_votes"
	PerpetualTicker           = "perpetual_ticker"
	PerpetualId               = "perpetual_id"
	PremiumRate               = "premium_rate"
	PremiumSampleValue        = "premium_sample_value"
	PremiumType               = "premium_type"

	// Prices.
	CurrentMarketPrices                     = "current_market_prices"
	DoesNotMeetMinPriceChange               = "does_not_meet_min_price_change"
	GetValidMarketPriceUpdates              = "get_valid_market_price_updates"
	IndexPriceDoesNotExist                  = "index_price_does_not_exist"
	IndexPriceIsZero                        = "index_price_is_zero"
	IndexPriceNotAccurate                   = "index_price_not_accurate"
	IndexPriceNotAvailForAccuracyCheck      = "index_price_not_available_for_accuracy_check"
	LastPriceUpdateForMarketBlock           = "last_price_update_for_market_block"
	MissingPriceUpdates                     = "missing_price_updates"
	NumMarketPricesToUpdate                 = "num_market_prices_to_update"
	PriceChangeRate                         = "price_change_rate"
	ProposedPriceChangesPriceUpdateDecision = "proposed_price_changes_price_update_decision"
	ProposedPriceCrossesOldPrice            = "proposed_price_crosses_old_price"
	StatefulPriceUpdateValidation           = "stateful_price_update_validation"
	UpdateMarketPrices                      = "update_market_prices"
	UpdateSmoothedPrices                    = "update_smoothed_prices"

	// Sending.
	Account                       = "account"
	New                           = "new"
	ProcessTransfer               = "process_transfer"
	Transfer                      = "transfer"
	ProcessDepositToSubaccount    = "process_deposit_to_subaccount"
	ProcessWithdrawFromSubaccount = "process_withdraw_from_subaccount"
	AssetId                       = "asset_id"
	SenderAddress                 = "sender_address"
	SenderSubaccount              = "sender_subaccount"
	RecipientAddress              = "recipient_address"
	RecipientSubaccount           = "recipient_subaccount"

	// Subaccount.
	CanUpdateSubaccounts                  = "can_update_subaccounts"
	GetNetCollateralAndMarginRequirements = "get_net_collateral_and_margin_requirements"
	GetSubaccount                         = "get_subaccount"
	UpdateSubaccounts                     = "update_subaccounts"

	// Liquidation Daemon.
	AllSubaccounts               = "get_all_subaccounts"
	LiquidatableSubaccountIds    = "liquidatable_subaccount_ids"
	LiquidationDaemon            = "liquidation_daemon"
	MainTaskLoop                 = "main_task_loop"
	SubaccountsWithOpenPositions = "subaccounts_with_open_positions"

	// Liquidation.
	InsuranceFundBalance                  = "insurance_fund_balance"
	InsuranceFundDelta                    = "insurance_fund_delta"
	Liquidations                          = "liquidations"
	MaybeLiquidateSubaccount              = "maybe_liquidate_subaccount"
	PlacePerpetualLiquidation             = "place_perpetual_liquidation"
	ProcessLiquidationMatches             = "process_liquidation_matches"
	SubaccountsNotLiquidatable            = "subaccounts_not_liquidatable"
	LiquidationOrderNotionalQuoteQuantums = "liquidation_order_notional_quote_quantums"
	Liquidated                            = "liquidated"
	SubaccountMaxInsuranceLost            = "exceeds_subaccount_max_insurance_lost"
	SubaccountMaxNotionalLiquidated       = "exceeds_subaccount_max_notional_liquidated"
	LiquidationRequiresDeleveraging       = "liquidation_requires_deleveraging"

	// Deleveraging.
	Deleveraging                   = "deleveraging"
	NumSubaccountsIterated         = "num_subaccounts_iterated"
	NotEnoughPositionToFullyOffset = "not_enough_position_to_fully_offset"
	NonOverlappingBankruptcyPrices = "non_overlapping_bankruptcy_prices"

	// Pricefeed Daemon.
	ExchangeQueryHandlerApiRequest          = "exchange_query_handler_api_request"
	GetAllPrices_MarketIdToPrice            = "get_all_prices_market_id_to_price"
	PriceEncoderUpdatePrice                 = "price_encoder_update_price"
	PricefeedDaemon                         = "pricefeed_daemon"
	PriceFetcherQueryExchange               = "price_fetcher_query_exchange"
	PriceFetcherSubtaskLoop                 = "price_fetcher_subtask_loop"
	PriceFetcherSubtaskLoopAndSetCtxTimeout = "price_fetcher_subtask_loop_and_set_ctx_timeout"
	PriceUpdateCount                        = "price_update_count"
	PriceUpdaterSendPrices                  = "price_updater_send_prices"
	PriceUpdaterTaskLoop                    = "price_updater_task_loop"
	PriceUpdaterTransformPrices             = "price_updater_transform_prices"
	PriceUpdaterZeroPrices                  = "price_updater_zero_prices"

	// Pricefeed Server.
	ExchangeFeedIsInvalid         = "exchange_feed_is_invalid"
	GetValidPrices                = "get_valid_prices"
	NoMarketPrice                 = "no_market_price"
	NoValidExchanges              = "no_valid_exchanges"
	NoValidMedianPrice            = "no_valid_median_price"
	PricefeedServer               = "pricefeed_server"
	PricefeedServerUpdatePrices   = "pricefeed_server_update_prices"
	PricefeedServerValidatePrices = "pricefeed_server_validate_prices"
	PriceIsInvalid                = "price_is_invalid"

	// Shared Pricefeed Server and Daemon.
	UpdatePrice = "update_price"

	// msgsender
	MessageSendSuccess    = "message_send_success"
	MessageSendError      = "message_send_error"
	SendOffchainData      = "send_offchain_data"
	SendOnchainData       = "send_onchain_data"
	OnchainMessageLength  = "onchain_message_length"
	OffchainMessageLength = "offchain_message_length"

	// Indexer events.
	TotalNumIndexerBlockEvents = "total_num_block_events"
	TotalNumIndexerTxnEvents   = "total_num_txn_events"
)
