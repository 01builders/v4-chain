// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/vesting/vesting_entry.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VestingEntry specifies a Vester Account and the rate at which tokens are
// dripped into the corresponding Treasury Account.
type VestingEntry struct {
	// The module account to vest tokens from.
	// This is also the key to this `VestingEntry` in state.
	VesterAccount string `protobuf:"bytes,1,opt,name=vester_account,json=vesterAccount,proto3" json:"vester_account,omitempty"`
	// The module account to vest tokens to.
	TreasuryAccount string `protobuf:"bytes,2,opt,name=treasury_account,json=treasuryAccount,proto3" json:"treasury_account,omitempty"`
	// The denom of the token to vest.
	Denom string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	// The start time of vesting. Before this time, no vesting will occur.
	StartTime *types.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of vesting. At this target date, all funds should be in the
	// Treasury Account and none left in the Vester Account.
	EndTime *types.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *VestingEntry) Reset()         { *m = VestingEntry{} }
func (m *VestingEntry) String() string { return proto.CompactTextString(m) }
func (*VestingEntry) ProtoMessage()    {}
func (*VestingEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7a257f8c452a5, []int{0}
}
func (m *VestingEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingEntry.Merge(m, src)
}
func (m *VestingEntry) XXX_Size() int {
	return m.Size()
}
func (m *VestingEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingEntry.DiscardUnknown(m)
}

var xxx_messageInfo_VestingEntry proto.InternalMessageInfo

func (m *VestingEntry) GetVesterAccount() string {
	if m != nil {
		return m.VesterAccount
	}
	return ""
}

func (m *VestingEntry) GetTreasuryAccount() string {
	if m != nil {
		return m.TreasuryAccount
	}
	return ""
}

func (m *VestingEntry) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *VestingEntry) GetStartTime() *types.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *VestingEntry) GetEndTime() *types.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func init() {
	proto.RegisterType((*VestingEntry)(nil), "dydxprotocol.vesting.VestingEntry")
}

func init() {
	proto.RegisterFile("dydxprotocol/vesting/vesting_entry.proto", fileDescriptor_f9f7a257f8c452a5)
}

var fileDescriptor_f9f7a257f8c452a5 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x48, 0xa9, 0x4c, 0xa9,
	0x28, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x2f, 0x4b, 0x2d, 0x2e, 0xc9, 0xcc, 0x4b,
	0x87, 0xd1, 0xf1, 0xa9, 0x79, 0x25, 0x45, 0x95, 0x7a, 0x60, 0x69, 0x21, 0x11, 0x64, 0x95, 0x7a,
	0x50, 0x15, 0x52, 0xf2, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x60, 0x89, 0xa4, 0xd2, 0x34,
	0xfd, 0x92, 0xcc, 0xdc, 0xd4, 0xe2, 0x92, 0xc4, 0xdc, 0x02, 0x88, 0x36, 0xa5, 0x17, 0x8c, 0x5c,
	0x3c, 0x61, 0x10, 0xc5, 0xae, 0x20, 0xd3, 0x84, 0x54, 0xb9, 0xf8, 0x40, 0x9a, 0x53, 0x8b, 0xe2,
	0x13, 0x93, 0x93, 0xf3, 0x4b, 0xf3, 0x4a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x78, 0x21,
	0xa2, 0x8e, 0x10, 0x41, 0x21, 0x4d, 0x2e, 0x81, 0x92, 0xa2, 0xd4, 0xc4, 0xe2, 0xd2, 0xa2, 0x4a,
	0xb8, 0x42, 0x26, 0xb0, 0x42, 0x7e, 0x98, 0x38, 0x4c, 0xa9, 0x08, 0x17, 0x6b, 0x4a, 0x6a, 0x5e,
	0x7e, 0xae, 0x04, 0x33, 0x58, 0x1e, 0xc2, 0x11, 0xb2, 0xe4, 0xe2, 0x2a, 0x2e, 0x49, 0x2c, 0x2a,
	0x89, 0x07, 0xb9, 0x48, 0x82, 0x45, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x4a, 0x0f, 0xe2, 0x5c, 0x3d,
	0x98, 0x73, 0xf5, 0x42, 0x60, 0xce, 0x0d, 0xe2, 0x04, 0xab, 0x06, 0xf1, 0x85, 0x4c, 0xb9, 0x38,
	0x52, 0xf3, 0x52, 0x20, 0x1a, 0x59, 0x09, 0x6a, 0x64, 0x4f, 0xcd, 0x4b, 0x01, 0xf1, 0x9c, 0x5c,
	0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5,
	0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x2b, 0x3d, 0xb3, 0x24, 0xa3,
	0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0x35, 0xc0, 0x4d, 0xf4, 0x2b, 0xe0, 0xa1, 0x5e, 0x52,
	0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x96, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x2e,
	0xfc, 0xf6, 0x9a, 0x01, 0x00, 0x00,
}

func (m *VestingEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVestingEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVestingEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintVestingEntry(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TreasuryAccount) > 0 {
		i -= len(m.TreasuryAccount)
		copy(dAtA[i:], m.TreasuryAccount)
		i = encodeVarintVestingEntry(dAtA, i, uint64(len(m.TreasuryAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VesterAccount) > 0 {
		i -= len(m.VesterAccount)
		copy(dAtA[i:], m.VesterAccount)
		i = encodeVarintVestingEntry(dAtA, i, uint64(len(m.VesterAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVestingEntry(dAtA []byte, offset int, v uint64) int {
	offset -= sovVestingEntry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VestingEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VesterAccount)
	if l > 0 {
		n += 1 + l + sovVestingEntry(uint64(l))
	}
	l = len(m.TreasuryAccount)
	if l > 0 {
		n += 1 + l + sovVestingEntry(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovVestingEntry(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovVestingEntry(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovVestingEntry(uint64(l))
	}
	return n
}

func sovVestingEntry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVestingEntry(x uint64) (n int) {
	return sovVestingEntry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VestingEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVestingEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VesterAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVestingEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVestingEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VesterAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVestingEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVestingEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TreasuryAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVestingEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVestingEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &types.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVestingEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVestingEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVestingEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &types.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVestingEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVestingEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVestingEntry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVestingEntry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVestingEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVestingEntry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVestingEntry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVestingEntry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVestingEntry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVestingEntry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVestingEntry = fmt.Errorf("proto: unexpected end of group")
)
